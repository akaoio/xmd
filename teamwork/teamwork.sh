#!/bin/bash
# XMD Teamwork Platform - Collaborative Dashboard System
# Version 2.0 - Tech Debt Free Edition

set -e  # Exit on error

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
XMD_BIN="${SCRIPT_DIR}/../xmd-release"
UPDATE_DIR="${SCRIPT_DIR}/update"
DASHBOARD_TEMPLATE="${SCRIPT_DIR}/dashboard_template.md"
DASHBOARD_OUTPUT="${SCRIPT_DIR}/dashboard.md"
TEAM_LIST_FILE="${SCRIPT_DIR}/.team_list"

# Colors for better UX
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Functions
print_header() {
    echo -e "${BLUE}════════════════════════════════════════════════════${NC}"
    echo -e "${BLUE}     XMD Teamwork Platform v2.0${NC}"
    echo -e "${BLUE}════════════════════════════════════════════════════${NC}"
    echo
}

print_success() {
    echo -e "${GREEN}✓${NC} $1"
}

print_error() {
    echo -e "${RED}✗${NC} $1" >&2
}

print_info() {
    echo -e "${YELLOW}ℹ${NC} $1"
}

# Check dependencies
check_dependencies() {
    if [ ! -f "$XMD_BIN" ]; then
        print_error "XMD binary not found at: $XMD_BIN"
        exit 1
    fi
    
    if [ ! -d "$UPDATE_DIR" ]; then
        print_info "Creating update directory..."
        mkdir -p "$UPDATE_DIR"
    fi
}

# Generate team list dynamically
update_team_list() {
    > "$TEAM_LIST_FILE"
    
    for file in "$UPDATE_DIR"/*.md; do
        if [ -f "$file" ]; then
            basename "$file" .md >> "$TEAM_LIST_FILE"
        fi
    done
    
    local count=$(wc -l < "$TEAM_LIST_FILE")
    print_info "Found $count team files"
}

# Create dashboard template dynamically
generate_dashboard_template() {
    cat > "$DASHBOARD_TEMPLATE" << 'EOF'
# Team Dashboard

<!-- xmd: set update_time = exec date '+%Y-%m-%d %H:%M:%S' -->

**Last Updated:** {{update_time}}

## 📊 Team Overview

EOF

    # Read team list and generate import sections
    local team_count=0
    while IFS= read -r team; do
        # Convert team name to title case
        local title=$(echo "$team" | sed 's/_/ /g' | awk '{for(i=1;i<=NF;i++) $i=toupper(substr($i,1,1)) tolower(substr($i,2))}1')
        
        cat >> "$DASHBOARD_TEMPLATE" << EOF
### $title Team
<!-- xmd:import update/${team}.md -->

---

EOF
        ((team_count++))
    done < "$TEAM_LIST_FILE"
    
    # Add statistics section
    cat >> "$DASHBOARD_TEMPLATE" << EOF
## 📈 Team Statistics

- **Total Teams:** $team_count
- **Platform Status:** 🟢 Operational
- **Auto-Discovery:** ✅ Enabled

## 🔄 Recent Changes

Check individual team sections above for the latest updates.

---
*Generated by XMD Teamwork Platform v2.0*
EOF
}

# Process dashboard
process_dashboard() {
    print_info "Processing dashboard..."
    
    if "$XMD_BIN" process "$DASHBOARD_TEMPLATE" -o "$DASHBOARD_OUTPUT" 2>/dev/null; then
        print_success "Dashboard generated successfully"
    else
        print_error "Failed to generate dashboard"
        return 1
    fi
}

# Start watch mode
start_watch() {
    # Kill any existing watch processes
    pkill -f "xmd.*watch.*dashboard" 2>/dev/null || true
    
    print_info "Starting watch mode..."
    "$XMD_BIN" watch "$DASHBOARD_TEMPLATE" "$DASHBOARD_OUTPUT" &
    local watch_pid=$!
    
    sleep 2
    
    if kill -0 $watch_pid 2>/dev/null; then
        print_success "Watch mode started (PID: $watch_pid)"
        echo $watch_pid > "${SCRIPT_DIR}/.watch_pid"
    else
        print_error "Failed to start watch mode"
        return 1
    fi
}

# Stop watch mode
stop_watch() {
    if [ -f "${SCRIPT_DIR}/.watch_pid" ]; then
        local pid=$(cat "${SCRIPT_DIR}/.watch_pid")
        if kill $pid 2>/dev/null; then
            print_success "Watch mode stopped"
        fi
        rm -f "${SCRIPT_DIR}/.watch_pid"
    else
        print_info "No watch process found"
    fi
}

# Add new team member
add_team() {
    local team_name="$1"
    local team_file="${UPDATE_DIR}/${team_name}.md"
    
    if [ -z "$team_name" ]; then
        print_error "Please provide a team name"
        echo "Usage: $0 add <team_name>"
        return 1
    fi
    
    if [ -f "$team_file" ]; then
        print_error "Team '$team_name' already exists"
        return 1
    fi
    
    # Create template for new team
    cat > "$team_file" << EOF
### ${team_name^} Update

**Role:** [Your Role]  
**Name:** [Your Name]  
**Status:** [Current Status]

#### Progress:
- [Add your progress items here]

#### Next Steps:
- [Add your next steps here]
EOF
    
    print_success "Created team file: $team_file"
    print_info "Edit the file to add your updates"
}

# List teams
list_teams() {
    echo -e "\n${BLUE}Current Teams:${NC}"
    echo "─────────────────────────"
    
    local count=0
    for file in "$UPDATE_DIR"/*.md; do
        if [ -f "$file" ]; then
            local team=$(basename "$file" .md)
            local last_modified=$(stat -c %y "$file" 2>/dev/null | cut -d' ' -f1 || date -r "$file" '+%Y-%m-%d' 2>/dev/null || echo "unknown")
            printf "  %-20s (updated: %s)\n" "$team" "$last_modified"
            ((count++))
        fi
    done
    
    if [ $count -eq 0 ]; then
        print_info "No teams found. Use '$0 add <team_name>' to create one."
    fi
    echo
}

# Show status
show_status() {
    echo -e "\n${BLUE}System Status:${NC}"
    echo "─────────────────────────"
    
    # Check watch status
    if [ -f "${SCRIPT_DIR}/.watch_pid" ]; then
        local pid=$(cat "${SCRIPT_DIR}/.watch_pid")
        if kill -0 $pid 2>/dev/null; then
            echo -e "  Watch Mode: ${GREEN}● Running${NC} (PID: $pid)"
        else
            echo -e "  Watch Mode: ${RED}● Stopped${NC}"
        fi
    else
        echo -e "  Watch Mode: ${RED}● Not running${NC}"
    fi
    
    # Check dashboard
    if [ -f "$DASHBOARD_OUTPUT" ]; then
        local last_update=$(stat -c %y "$DASHBOARD_OUTPUT" 2>/dev/null | cut -d' ' -f1,2 | cut -d'.' -f1 || echo "unknown")
        echo -e "  Dashboard:  ${GREEN}● Available${NC} (updated: $last_update)"
    else
        echo -e "  Dashboard:  ${YELLOW}● Not generated${NC}"
    fi
    
    # Team count
    local team_count=$(ls "$UPDATE_DIR"/*.md 2>/dev/null | wc -l)
    echo -e "  Teams:      $team_count registered"
    echo
}

# Main command handler
case "${1:-help}" in
    start)
        print_header
        check_dependencies
        update_team_list
        generate_dashboard_template
        process_dashboard
        start_watch
        show_status
        ;;
        
    stop)
        print_header
        stop_watch
        ;;
        
    restart)
        print_header
        stop_watch
        sleep 1
        check_dependencies
        update_team_list
        generate_dashboard_template
        process_dashboard
        start_watch
        show_status
        ;;
        
    add)
        print_header
        add_team "$2"
        ;;
        
    list)
        print_header
        list_teams
        ;;
        
    status)
        print_header
        show_status
        ;;
        
    update)
        print_header
        check_dependencies
        update_team_list
        generate_dashboard_template
        process_dashboard
        print_success "Dashboard updated"
        ;;
        
    help|--help|-h)
        print_header
        echo "Usage: $0 <command> [options]"
        echo
        echo "Commands:"
        echo "  start    - Start the teamwork platform and watch mode"
        echo "  stop     - Stop watch mode"
        echo "  restart  - Restart the platform"
        echo "  add      - Add a new team member"
        echo "  list     - List all teams"
        echo "  status   - Show system status"
        echo "  update   - Manually update dashboard"
        echo "  help     - Show this help message"
        echo
        echo "Examples:"
        echo "  $0 start           # Start the platform"
        echo "  $0 add backend     # Add backend team"
        echo "  $0 status          # Check system status"
        echo
        ;;
        
    *)
        print_error "Unknown command: $1"
        echo "Run '$0 help' for usage information"
        exit 1
        ;;
esac