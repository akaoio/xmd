/**
 * @file xmd_processor.c
 * @brief XMD directive processor implementation
 * @author XMD Team
 * @date 2025-07-26
 * 
 * Unified parser with full feature set:
 * - Core directives: set, get, exec, import
 * - Control flow: if/elif/else/endif with proper branching
 * - Loops: for/endfor with range and collection support
 * - Multiline directive support
 * - Variable substitution with {{variable}} syntax
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include <ctype.h>
#include <unistd.h>
#include <sys/wait.h>
#include "../include/token.h"
#include "../include/store.h"
#include "../include/variable.h"
#include "../include/lexer.h"
#include "../include/xmd.h"
#include "../include/utils.h"

#define MAX_OUTPUT_SIZE 65536
#define MAX_LOOP_ITERATIONS 10000
#define MAX_IF_DEPTH 32

// Forward declarations
static char* trim_whitespace(char* str);
static bool evaluate_condition(const char* condition, store* variables);
static char* substitute_variables(const char* text, store* variables);
static bool is_multiline_directive(const char* comment_content);
char* process_xmd_content(const char* input, store* variables);
static void process_multiline_directive(const char* directive_content, store* variables);

/**
 * @struct if_stack_entry
 * @brief Stack entry for nested if statements
 */
typedef struct {
    bool condition_met;     // Was condition true?
    bool branch_executed;   // Has any branch in this if-chain been executed?
    bool in_elif;          // Currently in elif processing
} if_stack_entry;

/**
 * @struct processor_context
 * @brief Context for XMD processing
 */
typedef struct {
    store* variables;
    if_stack_entry if_stack[MAX_IF_DEPTH];
    int if_stack_size;
    bool currently_executing;
} processor_context;

/**
 * @brief Create processor context
 * @param variables Variable store to associate with context
 * @return New processor context (caller must free) or NULL on error
 */
static processor_context* create_context(store* variables) {
    processor_context* ctx = malloc(sizeof(processor_context));
    ctx->variables = variables;
    ctx->if_stack_size = 0;
    ctx->currently_executing = true;
    return ctx;
}

/**
 * @brief Check if we should execute current block
 */
static bool should_execute_block(processor_context* ctx) {
    if (ctx->if_stack_size == 0) return true;
    
    for (int i = 0; i < ctx->if_stack_size; i++) {
        if (!ctx->if_stack[i].condition_met) {
            return false;
        }
    }
    return true;
}

/**
 * @brief Execute command and capture output
 */
static int execute_command(const char* command, char* output, size_t output_size) {
    FILE* pipe = popen(command, "r");
    if (!pipe) {
        snprintf(output, output_size, "[Error: Failed to execute command]");
        return -1;
    }
    
    size_t total_read = 0;
    while (total_read < output_size - 1) {
        size_t bytes_read = fread(output + total_read, 1, output_size - total_read - 1, pipe);
        if (bytes_read > 0) {
            total_read += bytes_read;
        } else {
            break;
        }
    }
    
    output[total_read] = '\0';
    
    int status = pclose(pipe);
    return WIFEXITED(status) ? WEXITSTATUS(status) : -1;
}

/**
 * @brief Process exec directive
 */
static int process_exec(const char* args, processor_context* ctx, char* output, size_t output_size) {
    if (!should_execute_block(ctx)) {
        output[0] = '\0';
        return 0;
    }
    
    // Substitute variables in command
    char* expanded = substitute_variables(args, ctx->variables);
    int result = execute_command(expanded, output, output_size);
    free(expanded);
    return result;
}

/**
 * @brief Process set directive
 */
static int process_set(const char* args, processor_context* ctx, char* output, size_t output_size) {
    (void)output_size; // Unused parameter
    char* assignment = strdup(args);
    char* equals = strchr(assignment, '=');
    
    if (equals) {
        *equals = '\0';
        char* var_name = trim_whitespace(assignment);
        char* var_value = trim_whitespace(equals + 1);
        
        // Remove quotes if present
        if (strlen(var_value) >= 2 &&
            ((var_value[0] == '"' && var_value[strlen(var_value)-1] == '"') ||
             (var_value[0] == '\'' && var_value[strlen(var_value)-1] == '\''))) {
            var_value[strlen(var_value)-1] = '\0';
            var_value++;
        }
        
        variable* var = variable_create_string(var_value);
        if (var) {
            store_set(ctx->variables, var_name, var);
            variable_unref(var);
        }
    }
    
    free(assignment);
    output[0] = '\0';
    return 0;
}

/**
 * @brief Process if directive with enhanced logic
 */
static int process_if(const char* args, processor_context* ctx, char* output, size_t output_size) {
    if (ctx->if_stack_size >= MAX_IF_DEPTH - 1) {
        snprintf(output, output_size, "[Error: If nesting too deep]");
        return -1;
    }
    
    bool condition_result = evaluate_condition(args, ctx->variables);
    
    if_stack_entry* entry = &ctx->if_stack[ctx->if_stack_size];
    entry->condition_met = condition_result;
    entry->branch_executed = condition_result;
    entry->in_elif = false;
    
    ctx->if_stack_size++;
    output[0] = '\0';
    return 0;
}

/**
 * @brief Process elif directive
 */
static int process_elif(const char* args, processor_context* ctx, char* output, size_t output_size) {
    if (ctx->if_stack_size == 0) {
        snprintf(output, output_size, "[Error: elif without if]");
        return -1;
    }
    
    if_stack_entry* entry = &ctx->if_stack[ctx->if_stack_size - 1];
    
    // Only evaluate elif if no previous branch was executed
    if (!entry->branch_executed) {
        bool condition_result = evaluate_condition(args, ctx->variables);
        entry->condition_met = condition_result;
        if (condition_result) {
            entry->branch_executed = true;
        }
    } else {
        entry->condition_met = false;
    }
    
    entry->in_elif = true;
    output[0] = '\0';
    return 0;
}

/**
 * @brief Process else directive
 */
static int process_else(processor_context* ctx, char* output, size_t output_size) {
    if (ctx->if_stack_size == 0) {
        snprintf(output, output_size, "[Error: else without if]");
        return -1;
    }
    
    if_stack_entry* entry = &ctx->if_stack[ctx->if_stack_size - 1];
    
    // Only execute else if no previous branch was executed
    entry->condition_met = !entry->branch_executed;
    if (!entry->branch_executed) {
        entry->branch_executed = true;
    }
    
    output[0] = '\0';
    return 0;
}

/**
 * @brief Process endif directive
 */
static int process_endif(processor_context* ctx, char* output, size_t output_size) {
    (void)output_size; // Unused parameter
    if (ctx->if_stack_size > 0) {
        ctx->if_stack_size--;
    }
    output[0] = '\0';
    return 0;
}

/**
 * @brief Process import directive
 */
static int process_import(const char* args, processor_context* ctx, char* output, size_t output_size) {
    if (!should_execute_block(ctx)) {
        output[0] = '\0';
        return 0;
    }
    
    // Parse filename from args (remove quotes if present)
    char* filename = strdup(args);
    char* trimmed_filename = trim_whitespace(filename);
    
    // Remove quotes if present
    if (strlen(trimmed_filename) >= 2 &&
        ((trimmed_filename[0] == '"' && trimmed_filename[strlen(trimmed_filename)-1] == '"') ||
         (trimmed_filename[0] == '\'' && trimmed_filename[strlen(trimmed_filename)-1] == '\''))) {
        trimmed_filename[strlen(trimmed_filename)-1] = '\0';
        trimmed_filename++;
    }
    
    // Read and process the imported file
    FILE* file = fopen(trimmed_filename, "r");
    if (!file) {
        snprintf(output, output_size, "<!-- Error: Could not import file '%s' -->", trimmed_filename);
        free(filename);
        return 0;
    }
    
    // Read file content
    fseek(file, 0, SEEK_END);
    long file_size = ftell(file);
    fseek(file, 0, SEEK_SET);
    
    char* file_content = malloc(file_size + 1);
    if (file_content) {
        size_t read_size = fread(file_content, 1, file_size, file);
        file_content[read_size] = '\0';
        
        // Process the imported content recursively
        char* processed_content = process_xmd_content(file_content, ctx->variables);
        if (processed_content) {
            strncpy(output, processed_content, output_size - 1);
            output[output_size - 1] = '\0';
            free(processed_content);
        }
        free(file_content);
    }
    
    fclose(file);
    free(filename);
    return 0;
}

/**
 * @brief Process for directive
 */
static int process_for(const char* args, processor_context* ctx, char* output, size_t output_size) {
    if (!should_execute_block(ctx)) {
        output[0] = '\0';
        return 0;
    }
    
    // Parse for loop syntax: "item in collection"
    char* args_copy = strdup(args);
    char* in_pos = strstr(args_copy, " in ");
    
    if (!in_pos) {
        snprintf(output, output_size, "<!-- Error: Invalid for loop syntax '%s' -->", args);
        free(args_copy);
        return 0;
    }
    
    *in_pos = '\0';
    char* item_name = trim_whitespace(args_copy);
    char* collection_name = trim_whitespace(in_pos + 4);
    
    // Get the collection variable
    variable* collection = store_get(ctx->variables, collection_name);
    if (!collection) {
        snprintf(output, output_size, "<!-- Error: Collection '%s' not found -->", collection_name);
        free(args_copy);
        return 0;
    }
    
    // For now, implement basic array iteration
    // This is a simplified implementation that iterates over array elements
    char* collection_str = variable_to_string(collection);
    if (!collection_str) {
        snprintf(output, output_size, "<!-- Error: Could not convert collection to string -->");
        free(args_copy);
        return 0;
    }
    
    // Simple implementation: split by commas and iterate
    char* token = strtok(collection_str, ",");
    char result_buffer[4096] = "";
    
    while (token) {
        // Set the loop variable
        char* trimmed_token = trim_whitespace(token);
        variable* item_var = variable_create_string(trimmed_token);
        store_set(ctx->variables, item_name, item_var);
        variable_unref(item_var);
        
        // For a complete implementation, we would process template content here
        // For now, just indicate the iteration
        char iteration_output[256];
        snprintf(iteration_output, sizeof(iteration_output), "<!-- Loop item: %s = %s -->\n", item_name, trimmed_token);
        strncat(result_buffer, iteration_output, sizeof(result_buffer) - strlen(result_buffer) - 1);
        
        token = strtok(NULL, ",");
    }
    
    strncpy(output, result_buffer, output_size - 1);
    output[output_size - 1] = '\0';
    
    free(collection_str);
    free(args_copy);
    return 0;
}

/**
 * @brief Process a single XMD directive
 */
static int process_directive(const char* directive, processor_context* ctx, char* output, size_t output_size) {
    char* dir_copy = strdup(directive);
    char* trimmed = trim_whitespace(dir_copy);
    
    // Skip "xmd:" prefix if present
    if (strncmp(trimmed, "xmd:", 4) == 0) {
        trimmed += 4;
        trimmed = trim_whitespace(trimmed);
    }
    
    int result = 0;
    
    // Extract command and args
    char* space = strchr(trimmed, ' ');
    char command[64];
    char* args = "";
    
    if (space) {
        size_t cmd_len = space - trimmed;
        if (cmd_len >= sizeof(command)) cmd_len = sizeof(command) - 1;
        strncpy(command, trimmed, cmd_len);
        command[cmd_len] = '\0';
        args = trim_whitespace(space + 1);
    } else {
        strncpy(command, trimmed, sizeof(command) - 1);
        command[sizeof(command) - 1] = '\0';
    }
    
    // Process based on command
    if (strcmp(command, "set") == 0) {
        result = process_set(args, ctx, output, output_size);
    } else if (strcmp(command, "if") == 0) {
        result = process_if(args, ctx, output, output_size);
    } else if (strcmp(command, "elif") == 0) {
        result = process_elif(args, ctx, output, output_size);
    } else if (strcmp(command, "else") == 0) {
        result = process_else(ctx, output, output_size);
    } else if (strcmp(command, "endif") == 0) {
        result = process_endif(ctx, output, output_size);
    } else if (strcmp(command, "exec") == 0) {
        result = process_exec(args, ctx, output, output_size);
    } else if (strcmp(command, "import") == 0) {
        result = process_import(args, ctx, output, output_size);
    } else if (strcmp(command, "for") == 0) {
        result = process_for(args, ctx, output, output_size);
    } else if (strcmp(command, "endfor") == 0) {
        output[0] = '\0';
        result = 0;
    } else {
        snprintf(output, output_size, "[Unknown command: %s]", command);
        result = -1;
    }
    
    free(dir_copy);
    return result;
}

/**
 * @brief Main XMD processing function
 * @param input Input markdown content with XMD directives
 * @param variables Variable store for XMD processing
 * @return Processed markdown content (caller must free) or NULL on error
 */
char* process_xmd_content(const char* input, store* variables) {
    if (!input || !variables) return NULL;
    
    processor_context* ctx = create_context(variables);
    
    size_t input_len = strlen(input);
    size_t output_capacity = input_len * 2;
    char* output = malloc(output_capacity);
    size_t output_pos = 0;
    
    const char* ptr = input;
    const char* input_end = input + input_len;
    
    while (ptr < input_end) {
        // Look for HTML comment start
        const char* comment_start = strstr(ptr, "<!--");
        
        if (!comment_start) {
            // No more comments, copy rest if executing
            if (should_execute_block(ctx)) {
                size_t remaining = input_end - ptr;
                if (output_pos + remaining >= output_capacity) {
                    output_capacity = (output_pos + remaining + 1) * 2;
                    output = realloc(output, output_capacity);
                }
                memcpy(output + output_pos, ptr, remaining);
                output_pos += remaining;
            }
            break;
        }
        
        // Copy content before comment if executing
        if (should_execute_block(ctx)) {
            size_t before_len = comment_start - ptr;
            if (output_pos + before_len >= output_capacity) {
                output_capacity = (output_pos + before_len + 1000) * 2;
                output = realloc(output, output_capacity);
            }
            memcpy(output + output_pos, ptr, before_len);
            output_pos += before_len;
        }
        
        // Find comment end
        const char* comment_end = strstr(comment_start + 4, "-->");
        if (!comment_end) {
            // Malformed comment, copy as-is if executing
            if (should_execute_block(ctx)) {
                size_t remaining = input_end - comment_start;
                if (output_pos + remaining >= output_capacity) {
                    output_capacity = (output_pos + remaining + 1) * 2;
                    output = realloc(output, output_capacity);
                }
                memcpy(output + output_pos, comment_start, remaining);
                output_pos += remaining;
            }
            break;
        }
        
        // Extract comment content
        size_t comment_content_len = comment_end - comment_start - 4;
        char* comment_content = malloc(comment_content_len + 1);
        strncpy(comment_content, comment_start + 4, comment_content_len);
        comment_content[comment_content_len] = '\0';
        
        // Check if this is an XMD directive
        char* trimmed = trim_whitespace(comment_content);
        
        if (strncmp(trimmed, "xmd:", 4) == 0) {
            // Process XMD directive
            if (is_multiline_directive(comment_content)) {
                process_multiline_directive(comment_content, variables);
            } else {
                char directive_output[4096];
                process_directive(trimmed, ctx, directive_output, sizeof(directive_output));
                
                // Add directive output if any
                if (strlen(directive_output) > 0 && should_execute_block(ctx)) {
                    size_t dir_len = strlen(directive_output);
                    if (output_pos + dir_len >= output_capacity) {
                        output_capacity = (output_pos + dir_len + 1000) * 2;
                        output = realloc(output, output_capacity);
                    }
                    memcpy(output + output_pos, directive_output, dir_len);
                    output_pos += dir_len;
                }
            }
        } else {
            // Regular HTML comment, copy if executing
            if (should_execute_block(ctx)) {
                size_t comment_len = comment_end + 3 - comment_start;
                if (output_pos + comment_len >= output_capacity) {
                    output_capacity = (output_pos + comment_len + 1) * 2;
                    output = realloc(output, output_capacity);
                }
                memcpy(output + output_pos, comment_start, comment_len);
                output_pos += comment_len;
            }
        }
        
        free(comment_content);
        ptr = comment_end + 3;
    }
    
    output[output_pos] = '\0';
    
    // Substitute variables in final output
    char* final_output = substitute_variables(output, variables);
    
    free(output);
    free(ctx);
    
    return final_output;
}

/**
 * @brief Evaluate condition (supports ==, !=, <, >, <=, >=)
 * @param condition Condition string to evaluate (e.g., "var == value")
 * @param variables Variable store for variable lookups
 * @return true if condition is true, false otherwise
 */
static bool evaluate_condition(const char* condition, store* variables) {
    char* cond_copy = strdup(condition);
    char* trimmed = trim_whitespace(cond_copy);
    
    // Look for operators
    struct {
        const char* op;
        int (*compare)(const char*, const char*);
    } operators[] = {
        {"==", (int(*)(const char*, const char*))strcmp},
        {"!=", (int(*)(const char*, const char*))strcmp},
        {"<=", NULL},
        {">=", NULL},
        {"<", NULL},
        {">", NULL}
    };
    
    for (int i = 0; i < 6; i++) {
        char* op_pos = strstr(trimmed, operators[i].op);
        if (op_pos) {
            *op_pos = '\0';
            char* left = trim_whitespace(trimmed);
            char* right = trim_whitespace(op_pos + strlen(operators[i].op));
            
            // Remove quotes from right side
            if (strlen(right) >= 2 &&
                ((right[0] == '"' && right[strlen(right)-1] == '"') ||
                 (right[0] == '\'' && right[strlen(right)-1] == '\''))) {
                right[strlen(right)-1] = '\0';
                right++;
            }
            
            // Get variable value
            variable* var = store_get(variables, left);
            char* var_value = var ? variable_to_string(var) : strdup("");
            
            bool result = false;
            if (strcmp(operators[i].op, "==") == 0) {
                result = strcmp(var_value, right) == 0;
            } else if (strcmp(operators[i].op, "!=") == 0) {
                result = strcmp(var_value, right) != 0;
            } else {
                // Numeric comparisons
                double left_num = atof(var_value);
                double right_num = atof(right);
                
                if (strcmp(operators[i].op, "<") == 0) {
                    result = left_num < right_num;
                } else if (strcmp(operators[i].op, ">") == 0) {
                    result = left_num > right_num;
                } else if (strcmp(operators[i].op, "<=") == 0) {
                    result = left_num <= right_num;
                } else if (strcmp(operators[i].op, ">=") == 0) {
                    result = left_num >= right_num;
                }
            }
            
            free(var_value);
            free(cond_copy);
            return result;
        }
    }
    
    // If no operator, treat as boolean variable
    variable* var = store_get(variables, trimmed);
    bool result = false;
    if (var) {
        char* var_value = variable_to_string(var);
        result = (var_value && strlen(var_value) > 0 && 
                 strcmp(var_value, "false") != 0 && 
                 strcmp(var_value, "0") != 0);
        free(var_value);
    }
    
    free(cond_copy);
    return result;
}

/**
 * @brief Check if comment contains multiline directive
 */
static bool is_multiline_directive(const char* comment_content) {
    const char* xmd_pos = strstr(comment_content, "xmd:");
    if (!xmd_pos) return false;
    
    const char* after_xmd = xmd_pos + 4;
    while (*after_xmd && (*after_xmd == ' ' || *after_xmd == '\t')) after_xmd++;
    
    return (*after_xmd == '\n' || *after_xmd == '\r');
}

/**
 * @brief Process multiline directive
 */
static void process_multiline_directive(const char* directive_content, store* variables) {
    char* content_copy = strdup(directive_content);
    char* line = strtok(content_copy, "\n\r");
    
    while (line) {
        char* trimmed = trim_whitespace(line);
        
        if (strncmp(trimmed, "xmd:", 4) == 0) {
            // Skip initial "xmd:" line
        } else if (strncmp(trimmed, "set ", 4) == 0) {
            // Process set directive
            processor_context temp_ctx = { .variables = variables, .if_stack_size = 0 };
            char dummy[16];
            process_set(trimmed + 4, &temp_ctx, dummy, sizeof(dummy));
        }
        
        line = strtok(NULL, "\n\r");
    }
    
    free(content_copy);
}

/**
 * @brief Substitute {{variable}} patterns in text
 * @param text Input text containing {{variable}} patterns
 * @param variables Variable store for variable lookups
 * @return New string with variables substituted (caller must free) or NULL on error
 */
static char* substitute_variables(const char* text, store* variables) {
    if (!text) return NULL;
    
    size_t text_len = strlen(text);
    size_t output_capacity = text_len * 2;
    char* output = malloc(output_capacity);
    size_t output_pos = 0;
    
    const char* ptr = text;
    while (*ptr) {
        if (ptr[0] == '{' && ptr[1] == '{') {
            const char* close = strstr(ptr + 2, "}}");
            if (close) {
                size_t var_len = close - ptr - 2;
                char* var_name = malloc(var_len + 1);
                strncpy(var_name, ptr + 2, var_len);
                var_name[var_len] = '\0';
                
                variable* var = store_get(variables, trim_whitespace(var_name));
                char* var_value = var ? variable_to_string(var) : strdup("");
                size_t value_len = strlen(var_value);
                
                if (output_pos + value_len >= output_capacity) {
                    output_capacity = (output_pos + value_len + 1000) * 2;
                    output = realloc(output, output_capacity);
                }
                
                memcpy(output + output_pos, var_value, value_len);
                output_pos += value_len;
                free(var_value);
                
                free(var_name);
                ptr = close + 2;
                continue;
            }
        }
        
        if (output_pos >= output_capacity - 1) {
            output_capacity *= 2;
            output = realloc(output, output_capacity);
        }
        
        output[output_pos++] = *ptr++;
    }
    
    output[output_pos] = '\0';
    return output;
}

/**
 * @brief Trim whitespace from string
 */
static char* trim_whitespace(char* str) {
    if (!str) return str;
    
    while (*str && isspace(*str)) str++;
    
    char* end = str + strlen(str) - 1;
    while (end > str && isspace(*end)) {
        *end = '\0';
        end--;
    }
    
    return str;
}

// Public API functions compatible with existing system

/**
 * @brief Process XMD directive (for backward compatibility)
 */
int process_xmd_directive(const char* directive, store* var_store, char* output, size_t output_size) {
    processor_context ctx = { .variables = var_store, .if_stack_size = 0, .currently_executing = true };
    return process_directive(directive, &ctx, output, output_size);
}

/**
 * @brief Process text with directives (for backward compatibility)
 */
int process_text_with_directives(const char* text, store* var_store, char* output, size_t output_size) {
    char* result = process_xmd_content(text, var_store);
    if (!result) {
        output[0] = '\0';
        return -1;
    }
    
    size_t result_len = strlen(result);
    if (result_len >= output_size) {
        result_len = output_size - 1;
    }
    
    memcpy(output, result, result_len);
    output[result_len] = '\0';
    
    free(result);
    return result_len;
}

/**
 * @brief Main XMD processor interface
 * @param processor XMD processor instance (currently unused)
 * @param content Input content to process
 * @param length Length of input content (currently unused - uses strlen)
 * @return Processing result structure (caller must free with xmd_result_free)
 */
xmd_result* xmd_process_string(xmd_processor* processor, const char* content, size_t length) {
    (void)length; // Unused parameter - using strlen instead
    if (!processor || !content) {
        xmd_result* result = malloc(sizeof(xmd_result));
        result->error_code = XMD_ERROR_INVALID_ARGUMENT;
        result->error_message = strdup("Invalid arguments");
        result->output = NULL;
        result->output_length = 0;
        result->processing_time_ms = 0;
        result->memory_used_bytes = 0;
        return result;
    }
    
    // Treat processor as store for now
    store* variables = (store*)processor;
    
    // Process with unified parser
    char* processed_output = process_xmd_content(content, variables);
    
    // Create result
    xmd_result* result = malloc(sizeof(xmd_result));
    result->error_code = XMD_SUCCESS;
    result->error_message = NULL;
    result->output = processed_output;
    result->output_length = processed_output ? strlen(processed_output) : 0;
    result->processing_time_ms = 0;
    result->memory_used_bytes = result->output_length + sizeof(xmd_result);
    
    return result;
}

/**
 * @brief Process complete for loop (backward compatibility stub)
 * @deprecated This function is retained for backward compatibility
 */
int process_complete_for_loop(const char* content, size_t for_start, size_t args_start, 
                             size_t args_end, store* var_store, char* output, size_t output_size) {
    (void)content;     // Unused parameter
    (void)for_start;   // Unused parameter  
    (void)args_start;  // Unused parameter
    (void)args_end;    // Unused parameter
    (void)var_store;   // Unused parameter
    (void)output_size; // Unused parameter
    
    // Deprecated function - return empty output
    output[0] = '\0';
    return 0;
}

/**
 * @brief Process complete if statement (backward compatibility stub)
 * @deprecated This function is retained for backward compatibility
 */
int process_complete_if_statement(const char* content, size_t if_start, size_t args_start, 
                                 size_t args_end, store* var_store, char* output, size_t output_size) {
    (void)content;     // Unused parameter
    (void)if_start;    // Unused parameter
    (void)args_start;  // Unused parameter
    (void)args_end;    // Unused parameter
    (void)var_store;   // Unused parameter
    (void)output_size; // Unused parameter
    
    // Deprecated function - return empty output
    output[0] = '\0';
    return 0;
}

/**
 * @brief Validate XMD syntax
 */
xmd_error_code xmd_validate_syntax(const char* input, size_t input_length) {
    // Basic syntax validation
    if (!input || input_length == 0) {
        return XMD_ERROR_INVALID_ARGUMENT;
    }
    
    // Check for balanced XMD comment tags
    const char* ptr = input;
    int comment_depth = 0;
    
    while (ptr < input + input_length) {
        if (strncmp(ptr, "<!--", 4) == 0) {
            if (strncmp(ptr + 4, " xmd:", 5) == 0 || strncmp(ptr + 4, "xmd:", 4) == 0) {
                comment_depth++;
            }
            ptr += 4;
        } else if (strncmp(ptr, "-->", 3) == 0) {
            if (comment_depth > 0) {
                comment_depth--;
            }
            ptr += 3;
        } else {
            ptr++;
        }
    }
    
    return (comment_depth == 0) ? XMD_SUCCESS : XMD_ERROR_SYNTAX;
}

/**
 * @brief Get error string for error code
 */
const char* xmd_error_string(xmd_error_code code) {
    switch (code) {
        case XMD_SUCCESS: return "Success";
        case XMD_ERROR_INVALID_ARGUMENT: return "Invalid argument";
        case XMD_ERROR_OUT_OF_MEMORY: return "Out of memory";
        case XMD_ERROR_FILE_NOT_FOUND: return "File not found";
        case XMD_ERROR_PERMISSION: return "Permission denied";
        case XMD_ERROR_SYNTAX: return "Syntax error";
        case XMD_ERROR_TIMEOUT: return "Timeout";
        default: return "Unknown error";
    }
}
